import pandas as pd
import matplotlib.pyplot as plt
from numpy import array
from sklearn import svm
from sklearn import model_selection
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
# importing cross validation to be used


train_data = pd.read_csv("Test Data/train.csv") # train_data is the data we're training our ML algo on
test_data = pd.read_csv("Test Data/test.csv")   # test_data is the data we're testing our ML algo on


features = ["Pclass", "Sex", "SibSp", "Parch"] # The attributes we want currently
# I've removed some of the attributes because they aren't complete in the csv files. (TODO)

X = pd.get_dummies(train_data[features])
# Basically for sex, there are two things
# Male and Female, so the get_dummies basically just
# sets the data to categories, which will make it easier
# for the ML algo.

X_test = pd.get_dummies(test_data[features])

# So the way the ML algorithm works is we fit a set of data to a set of outcomes
# We have the set of data (train_data), so we need a set of outcomes, which is already in train_data.
# and it's the survived column
y = train_data["Survived"]

# So we're using SVC with a linear kernel
# You probably need to do your own research on what C does. (I don't really understand it and it seems to be subject to argument)
clf = svm.SVC(kernel="linear", C = 1.0)

test_train = array(X, y)
test_train1 = array(X)

# prepare cross validation
kfold = model_selection.KFold(3, True, 1)
# enumerate splits
for train, test in kfold.split(test_train):
      print('train: %s, test: %s' % (test_train[train], test_train[test]))
      testing_comparison = [test_train[test]]
      training = [test_train[train]]

for train, test in kfold.split(test_train1):
      print('train: %s, test: %s' % (test_train1[train], test_train1[test]))
      testing = [test_train1[test]]

print(testing)
print(training)

# We fit the training data to it's outcomes
clf.fit(X, y)

# And then we predict the test data.
survived = clf.predict(X_test)


# evaluate predictions
#acc = accuracy_score(survived, y)
#print('Accuracy: %.3f' % acc)

# We then need to somehow output the file
# I did this by creating a DataFrame (basically a bit like an excel sprdsht)
# It has two columns, PassengerId, and Survived
submission = pd.DataFrame({"PassengerId": test_data["PassengerId"], "Survived": survived})


# Send to csv without indexes
submission.to_csv("Test Data/submission.csv", index = False)

w = clf.coef_[0] # The coefficients of the algo :D